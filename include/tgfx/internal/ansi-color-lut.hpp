#pragma once

#include <iterator>
#include <map>

namespace tgfx::internal
{

/**
 * @brief A 256 color lookup-table for ansi escape codes. Pairs the ansi escape code identifier with the actual color integer. For 16 color mode, only the first 16 colors are used.
 * 
 */
static std::map<uint8_t, uint32_t> COLORS = {
	{ 0, 0x000000ff },
	{ 1, 0x800000ff },
	{ 2, 0x008000ff },
	{ 3, 0x808000ff },
	{ 4, 0x000080ff },
	{ 5, 0x800080ff },
	{ 6, 0x008080ff },
	{ 7, 0xc0c0c0ff },
	{ 8, 0x808080ff },
	{ 9, 0xff0000ff },
	{ 10, 0x00ff00ff },
	{ 11, 0xffff00ff },
	{ 12, 0x0000ffff },
	{ 13, 0xff00ffff },
	{ 14, 0x00ffffff },
	{ 15, 0xffffffff },
	{ 16, 0x000000ff },
	{ 17, 0x00005fff },
	{ 18, 0x000087ff },
	{ 19, 0x0000afff },
	{ 20, 0x0000d7ff },
	{ 21, 0x0000ffff },
	{ 22, 0x005f00ff },
	{ 23, 0x005f5fff },
	{ 24, 0x005f87ff },
	{ 25, 0x005fafff },
	{ 26, 0x005fd7ff },
	{ 27, 0x005fffff },
	{ 28, 0x008700ff },
	{ 29, 0x00875fff },
	{ 30, 0x008787ff },
	{ 31, 0x0087afff },
	{ 32, 0x0087d7ff },
	{ 33, 0x0087ffff },
	{ 34, 0x00af00ff },
	{ 35, 0x00af5fff },
	{ 36, 0x00af87ff },
	{ 37, 0x00afafff },
	{ 38, 0x00afd7ff },
	{ 39, 0x00afffff },
	{ 40, 0x00d700ff },
	{ 41, 0x00d75fff },
	{ 42, 0x00d787ff },
	{ 43, 0x00d7afff },
	{ 44, 0x00d7d7ff },
	{ 45, 0x00d7ffff },
	{ 46, 0x00ff00ff },
	{ 47, 0x00ff5fff },
	{ 48, 0x00ff87ff },
	{ 49, 0x00ffafff },
	{ 50, 0x00ffd7ff },
	{ 51, 0x00ffffff },
	{ 52, 0x5f0000ff },
	{ 53, 0x5f005fff },
	{ 54, 0x5f0087ff },
	{ 55, 0x5f00afff },
	{ 56, 0x5f00d7ff },
	{ 57, 0x5f00ffff },
	{ 58, 0x5f5f00ff },
	{ 59, 0x5f5f5fff },
	{ 60, 0x5f5f87ff },
	{ 61, 0x5f5fafff },
	{ 62, 0x5f5fd7ff },
	{ 63, 0x5f5fffff },
	{ 64, 0x5f8700ff },
	{ 65, 0x5f875fff },
	{ 66, 0x5f8787ff },
	{ 67, 0x5f87afff },
	{ 68, 0x5f87d7ff },
	{ 69, 0x5f87ffff },
	{ 70, 0x5faf00ff },
	{ 71, 0x5faf5fff },
	{ 72, 0x5faf87ff },
	{ 73, 0x5fafafff },
	{ 74, 0x5fafd7ff },
	{ 75, 0x5fafffff },
	{ 76, 0x5fd700ff },
	{ 77, 0x5fd75fff },
	{ 78, 0x5fd787ff },
	{ 79, 0x5fd7afff },
	{ 80, 0x5fd7d7ff },
	{ 81, 0x5fd7ffff },
	{ 82, 0x5fff00ff },
	{ 83, 0x5fff5fff },
	{ 84, 0x5fff87ff },
	{ 85, 0x5fffafff },
	{ 86, 0x5fffd7ff },
	{ 87, 0x5fffffff },
	{ 88, 0x870000ff },
	{ 89, 0x87005fff },
	{ 90, 0x870087ff },
	{ 91, 0x8700afff },
	{ 92, 0x8700d7ff },
	{ 93, 0x8700ffff },
	{ 94, 0x875f00ff },
	{ 95, 0x875f5fff },
	{ 96, 0x875f87ff },
	{ 97, 0x875fafff },
	{ 98, 0x875fd7ff },
	{ 99, 0x875fffff },
	{ 100, 0x878700ff },
	{ 101, 0x87875fff },
	{ 102, 0x878787ff },
	{ 103, 0x8787afff },
	{ 104, 0x8787d7ff },
	{ 105, 0x8787ffff },
	{ 106, 0x87af00ff },
	{ 107, 0x87af5fff },
	{ 108, 0x87af87ff },
	{ 109, 0x87afafff },
	{ 110, 0x87afd7ff },
	{ 111, 0x87afffff },
	{ 112, 0x87d700ff },
	{ 113, 0x87d75fff },
	{ 114, 0x87d787ff },
	{ 115, 0x87d7afff },
	{ 116, 0x87d7d7ff },
	{ 117, 0x87d7ffff },
	{ 118, 0x87ff00ff },
	{ 119, 0x87ff5fff },
	{ 120, 0x87ff87ff },
	{ 121, 0x87ffafff },
	{ 122, 0x87ffd7ff },
	{ 123, 0x87ffffff },
	{ 124, 0xaf0000ff },
	{ 125, 0xaf005fff },
	{ 126, 0xaf0087ff },
	{ 127, 0xaf00afff },
	{ 128, 0xaf00d7ff },
	{ 129, 0xaf00ffff },
	{ 130, 0xaf5f00ff },
	{ 131, 0xaf5f5fff },
	{ 132, 0xaf5f87ff },
	{ 133, 0xaf5fafff },
	{ 134, 0xaf5fd7ff },
	{ 135, 0xaf5fffff },
	{ 136, 0xaf8700ff },
	{ 137, 0xaf875fff },
	{ 138, 0xaf8787ff },
	{ 139, 0xaf87afff },
	{ 140, 0xaf87d7ff },
	{ 141, 0xaf87ffff },
	{ 142, 0xafaf00ff },
	{ 143, 0xafaf5fff },
	{ 144, 0xafaf87ff },
	{ 145, 0xafafafff },
	{ 146, 0xafafd7ff },
	{ 147, 0xafafffff },
	{ 148, 0xafd700ff },
	{ 149, 0xafd75fff },
	{ 150, 0xafd787ff },
	{ 151, 0xafd7afff },
	{ 152, 0xafd7d7ff },
	{ 153, 0xafd7ffff },
	{ 154, 0xafff00ff },
	{ 155, 0xafff5fff },
	{ 156, 0xafff87ff },
	{ 157, 0xafffafff },
	{ 158, 0xafffd7ff },
	{ 159, 0xafffffff },
	{ 160, 0xd70000ff },
	{ 161, 0xd7005fff },
	{ 162, 0xd70087ff },
	{ 163, 0xd700afff },
	{ 164, 0xd700d7ff },
	{ 165, 0xd700ffff },
	{ 166, 0xd75f00ff },
	{ 167, 0xd75f5fff },
	{ 168, 0xd75f87ff },
	{ 169, 0xd75fafff },
	{ 170, 0xd75fd7ff },
	{ 171, 0xd75fffff },
	{ 172, 0xd78700ff },
	{ 173, 0xd7875fff },
	{ 174, 0xd78787ff },
	{ 175, 0xd787afff },
	{ 176, 0xd787d7ff },
	{ 177, 0xd787ffff },
	{ 178, 0xd7af00ff },
	{ 179, 0xd7af5fff },
	{ 180, 0xd7af87ff },
	{ 181, 0xd7afafff },
	{ 182, 0xd7afd7ff },
	{ 183, 0xd7afffff },
	{ 184, 0xd7d700ff },
	{ 185, 0xd7d75fff },
	{ 186, 0xd7d787ff },
	{ 187, 0xd7d7afff },
	{ 188, 0xd7d7d7ff },
	{ 189, 0xd7d7ffff },
	{ 190, 0xd7ff00ff },
	{ 191, 0xd7ff5fff },
	{ 192, 0xd7ff87ff },
	{ 193, 0xd7ffafff },
	{ 194, 0xd7ffd7ff },
	{ 195, 0xd7ffffff },
	{ 196, 0xff0000ff },
	{ 197, 0xff005fff },
	{ 198, 0xff0087ff },
	{ 199, 0xff00afff },
	{ 200, 0xff00d7ff },
	{ 201, 0xff00ffff },
	{ 202, 0xff5f00ff },
	{ 203, 0xff5f5fff },
	{ 204, 0xff5f87ff },
	{ 205, 0xff5fafff },
	{ 206, 0xff5fd7ff },
	{ 207, 0xff5fffff },
	{ 208, 0xff8700ff },
	{ 209, 0xff875fff },
	{ 210, 0xff8787ff },
	{ 211, 0xff87afff },
	{ 212, 0xff87d7ff },
	{ 213, 0xff87ffff },
	{ 214, 0xffaf00ff },
	{ 215, 0xffaf5fff },
	{ 216, 0xffaf87ff },
	{ 217, 0xffafafff },
	{ 218, 0xffafd7ff },
	{ 219, 0xffafffff },
	{ 220, 0xffd700ff },
	{ 221, 0xffd75fff },
	{ 222, 0xffd787ff },
	{ 223, 0xffd7afff },
	{ 224, 0xffd7d7ff },
	{ 225, 0xffd7ffff },
	{ 226, 0xffff00ff },
	{ 227, 0xffff5fff },
	{ 228, 0xffff87ff },
	{ 229, 0xffffafff },
	{ 230, 0xffffd7ff },
	{ 231, 0xffffffff },
	{ 232, 0x080808ff },
	{ 233, 0x121212ff },
	{ 234, 0x1c1c1cff },
	{ 235, 0x262626ff },
	{ 236, 0x303030ff },
	{ 237, 0x3a3a3aff },
	{ 238, 0x444444ff },
	{ 239, 0x4e4e4eff },
	{ 240, 0x585858ff },
	{ 241, 0x626262ff },
	{ 242, 0x6c6c6cff },
	{ 243, 0x767676ff },
	{ 244, 0x808080ff },
	{ 245, 0x8a8a8aff },
	{ 246, 0x949494ff },
	{ 247, 0x9e9e9eff },
	{ 248, 0xa8a8a8ff },
	{ 249, 0xb2b2b2ff },
	{ 250, 0xbcbcbcff },
	{ 251, 0xc6c6c6ff },
	{ 252, 0xd0d0d0ff },
	{ 253, 0xdadadaff },
	{ 254, 0xe4e4e4ff },
	{ 255, 0xeeeeeeff }

};

}